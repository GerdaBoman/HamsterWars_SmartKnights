@page "/battle"
@using HamsterWars.Shared.Models
@inject IHamsterService hamsterService

<h3 class="justify-content-center">Which one is cuter?!</h3>

@if(firstHamster != null && secondHamster != null)
{
    
    <div class="container d-flex align-items-center justify-content-center position-relative flex-wrap">
         <div class="inludingBtn">
              
                
        <div class="card d-flex position-relative flex-column">
            
            <div class='imgContainer'>
                <img class="battleImages" src='images/hamsterImg/@firstHamster.ImgName'>
            </div>
            <div class="content">
                <h2>@firstHamster.Name</h2>
                <p>Age: @firstHamster.Age</p>
                <p>Loves: @firstHamster.Loves</p>
                <p>Favorite food: @firstHamster.FavFood</p>
                  <button type="submit" @onclick="() => ChosenWinner(firstHamster.Id)" class="btn btn-success"><span class="oi oi-check"></span> Vote for me!</button>
            </div>
        </div>
      </div>
      <div class="inludingBtn">
              
        <div class="card d-flex position-relative flex-column">
            <div class='imgContainer'>
                <img class="battleImages" src='images/hamsterImg/@secondHamster.ImgName'>
            </div>
             <div class="content">
                <h2>@secondHamster.Name</h2>
                <p>Age: @secondHamster.Age</p>
                <p>Loves: @secondHamster.Loves</p>
                <p>Favorite food: @secondHamster.FavFood</p>
                <button type="submit" @onclick="() => ChosenWinner(secondHamster.Id)" class="btn btn-success"><span class="oi oi-check"></span> Vote for me!</button> 
            </div>
        </div>
   </div>
  </div>
    @if (result)
    {
          
         <h1> Precious winner: @winnerHamster.Name</h1>
         <h3> @GetPercentage(winnerHamster)% of people agree that @winnerHamster.Name is cuter than @loserHamster.Name</h3>
         
         <ul>
             <li>Wins: @winnerHamster.Wins </li>
             <li>Losses: @winnerHamster.Losses</li>
             <li>Total Games: @winnerHamster.Games</li>
         </ul>

         <h2> Previous loser : @loserHamster.Name</h2>

         <ul>
             <li>Wins: @loserHamster.Wins </li>
             <li>Losses: @loserHamster.Losses</li>
             <li>Total Games: @loserHamster.Games</li>
         </ul>
  
    }

}
else
{
    <h2>No hamster have been found! Have you got cheese to attract hamsters?</h2>
}

@code {
    Hamster firstHamster = new();
    Hamster secondHamster = new();


    Hamster winnerHamster = new();
    Hamster loserHamster = new();

    bool result = false;
    int win = 1;
    int lost = 1;
    int game = 1;

    double GetPercentage(Hamster hamster)
    {
        double wins = Convert.ToDouble(hamster.Wins);
        double totalGames = Convert.ToDouble(hamster.Games);

        double percentage = Math.Round(((wins / totalGames) * 100), 2);

        return percentage;
    }

    protected override async Task OnInitializedAsync()
    {

        firstHamster = await hamsterService.GetRandomHamster();
        secondHamster = await hamsterService.GetRandomHamster();

        if( firstHamster.Id == secondHamster.Id)
        {
            secondHamster = await hamsterService.GetRandomHamster();
        }
    }
    void ChosenWinner(int id)
    {
        if(id == firstHamster.Id)
        {
            firstHamster.Wins = firstHamster.Wins + win;
            secondHamster.Losses = secondHamster.Losses + lost;
            firstHamster.Games = firstHamster.Games + game;
            secondHamster.Games= secondHamster.Games + game;


            UpdateHamster(firstHamster);
            UpdateHamster(secondHamster);

            winnerHamster = firstHamster;
            loserHamster = secondHamster;
            double winnerStatistics = GetPercentage(winnerHamster);

            NewBattle();
            result = true;

        }
        else
        {
            secondHamster.Wins = secondHamster.Wins + win;
            firstHamster.Losses = firstHamster.Losses + lost;
            firstHamster.Games = firstHamster.Games + game;
            secondHamster.Games= secondHamster.Games + game;

            UpdateHamster(firstHamster);
            UpdateHamster(secondHamster);

            winnerHamster = secondHamster;
            loserHamster = firstHamster;

            double winnerStatistics = GetPercentage(winnerHamster);

            NewBattle();
            result = true;


        }

    }

    async Task UpdateHamster(Hamster hamster)
    {
        await hamsterService.UpdateHamster(hamster);
      
        
    }

    async Task NewBattle()
    {
        firstHamster = await hamsterService.GetRandomHamster();
        secondHamster = await hamsterService.GetRandomHamster();
        StateHasChanged();
    }

 


}
