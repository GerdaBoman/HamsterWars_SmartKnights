@page "/battle"
@using HamsterWars.Shared.Models
@inject IHamsterService hamsterService

<div class="battleTop">
    <h2>Which one is cuter?!</h2>
    <h3>Press on the picture of your chosen one to vote for your champion!</h3>
</div>

@if(firstHamster != null && secondHamster != null)
{

      <div class="container d-flex align-items-center justify-content-center position-relative flex-wrap">
       
        <div class="card d-flex position-relative flex-column">
            
            <div class='imgContainer'>
                <img class="battleImages" src='images/hamsterImg/@firstHamster.ImgName' @onclick="() => ChosenWinner(firstHamster.Id)">
            </div>
            <div class="content">
                <h2>@firstHamster.Name</h2>
                <p>Age: @firstHamster.Age</p>
                <p>Loves: @firstHamster.Loves</p>
                <p>Favorite food: @firstHamster.FavFood</p>
            </div>
        </div>
    
  
        <div class="card d-flex position-relative flex-column">
            <div class='imgContainer'>
                <img class="battleImages" src='images/hamsterImg/@secondHamster.ImgName' @onclick="() => ChosenWinner(secondHamster.Id)">
            </div>
             <div class="content">
                <h2>@secondHamster.Name</h2>
                <p>Age: @secondHamster.Age</p>
                <p>Loves: @secondHamster.Loves</p>
                <p>Favorite food: @secondHamster.FavFood</p>
            </div>
        </div>
   </div>

  

    @if (result)
    {  

    <div class="results">
        <div class="result-title">
            <h1> Previous results: </h1>
            <h3> @GetPercentage(winnerHamster)% of people agree with you that @winnerHamster.Name is cuter than @loserHamster.Name</h3>
        </div>


        <div class="row">
            <div class="col d-flex justify-content-center text-center">
      <div class="flip-card">
         <div class="flip-card-inner">
            <div class="flip-card-front">
                 <img src='images/hamsterImg/@winnerHamster.ImgName' alt="@winnerHamster.Name" style="width:300px;height:300px;">
                 <h3 class="bottom-right">Winner</h3>
             </div>
            <div class="flip-card-back">
                <h1>@winnerHamster.Name</h1>
                <p class="hamsterInfo">Wins: @winnerHamster.Wins </p>
                <p class="hamsterInfo">Losses: @winnerHamster.Losses</p>
                <p class="hamsterInfo">Games: @winnerHamster.Games</p>
            </div>
           </div>
      </div>  
      </div>

      <div class="col d-flex justify-content-center text-center">
      <div class="flip-card">
         <div class="flip-card-inner">
            <div class="flip-card-front">
                 <img src='images/hamsterImg/@loserHamster.ImgName' alt="@loserHamster.Name" style="width:300px;height:300px;">
                 <h3 class="bottom-right">Loser</h3>
             </div>
            <div class="flip-card-back">
                <h1>@loserHamster.Name</h1>
                <p class="hamsterInfo">Wins: @loserHamster.Wins </p>
                <p class="hamsterInfo">Losses: @loserHamster.Losses</p>
                <p class="hamsterInfo">Games: @loserHamster.Games</p>
            </div>
           </div>
      </div>
    </div>
    </div>
 </div>
  
        
  
    }

}
else
{
    <h2>Not enough hamster have been found! Add some to our hamster library to be able to vote!</h2>
}


@code {
    Hamster firstHamster = new();
    Hamster secondHamster = new();


    Hamster winnerHamster = new();
    Hamster loserHamster = new();

    bool result = false;
    int win = 1;
    int lost = 1;
    int game = 1;

    double GetPercentage(Hamster hamster)
    {
        double wins = Convert.ToDouble(hamster.Wins);
        double totalGames = Convert.ToDouble(hamster.Games);

        double percentage = Math.Round(((wins / totalGames) * 100), 2);

        return percentage;
    }

    protected override async Task OnInitializedAsync()
    {
        firstHamster = await hamsterService.GetRandomHamster();
        secondHamster = await hamsterService.GetRandomHamster();
        CheckForDublicateHamster(firstHamster, secondHamster);
    }
    void ChosenWinner(int id)
    {
        if(id == firstHamster.Id)
        {
            firstHamster.Wins = firstHamster.Wins + win;
            secondHamster.Losses = secondHamster.Losses + lost;
            firstHamster.Games = firstHamster.Games + game;
            secondHamster.Games= secondHamster.Games + game;


            UpdateHamster(firstHamster);
            UpdateHamster(secondHamster);

            winnerHamster = firstHamster;
            loserHamster = secondHamster;
            double winnerStatistics = GetPercentage(winnerHamster);

            NewBattle();
            result = true;

        }
        else
        {
            secondHamster.Wins = secondHamster.Wins + win;
            firstHamster.Losses = firstHamster.Losses + lost;
            firstHamster.Games = firstHamster.Games + game;
            secondHamster.Games= secondHamster.Games + game;

            UpdateHamster(firstHamster);
            UpdateHamster(secondHamster);

            winnerHamster = secondHamster;
            loserHamster = firstHamster;

            double winnerStatistics = GetPercentage(winnerHamster);

            NewBattle();
            result = true;


        }

    }

    async Task UpdateHamster(Hamster hamster)
    {
        await hamsterService.UpdateHamster(hamster);
    }

    async Task NewBattle()
    {
        firstHamster = await hamsterService.GetRandomHamster();
        secondHamster = await hamsterService.GetRandomHamster();
        CheckForDublicateHamster(firstHamster, secondHamster);
        StateHasChanged();
    }

     async Task CheckForDublicateHamster (Hamster firstH, Hamster secondH)
    {
        while(firstH.Id == secondH.Id)
        {
            secondHamster = await hamsterService.GetRandomHamster();
        }
    }



}
