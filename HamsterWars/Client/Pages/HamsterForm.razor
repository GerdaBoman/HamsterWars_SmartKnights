@page "/hamster"
@using HamsterWars.Shared
@using HamsterWars.Shared.Models
@inject IHamsterService HamsterService
@inject HttpClient http

    <PageTitle>Create a new hamster</PageTitle>
    
    <head>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Raleway&display=swap" rel="stylesheet">
</head>

    <h3 class="formTitle">Create a new hamster</h3>

    <div class = "createHamsterForm d-flex justify-content-center mx-auto">

<EditForm Model="@hamster"OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
                     <div class="form-group row">  
                         <div class="col-xs-2">  
                        <label for="Name">Name: </label>  
                        <InputText id="Name" class="form-control" @bind-Value="@hamster.Name" placeholder="Enter hamsters name"></InputText>  
                    </div>
                    </div>
                 
                    <div class="form-group">  
                        <label for="Age">Age: </label>  
                        <InputNumber id="Age" class="form-control" @bind-Value="@hamster.Age" placeholder="Enter hamsters age"></InputNumber>  
                    </div>
                    <div class="form-group">  
                        <label for="favFood">Favorite food: </label>  
                        <InputText id="favFood" class="form-control" @bind-Value="@hamster.FavFood" placeholder="Enter favorite food"></InputText>  
                    </div> 
                    <div class="form-group">  
                        <label for="loves">Loves: </label>  
                        <InputText id="loves" class="form-control" @bind-Value="@hamster.Loves" placeholder="Enter what hamster loves"></InputText>  
                    </div
                    
                    <div class="form-group">
                        <label for="imgName">Image: </label>
                        <InputFile id="imgName" class="custom-file-input" OnChange="OnChange" accept="image/png, image/jpeg, image/gif" placeholder="Choose an image "></InputFile>
                    </div>
                     <div class="form-group">
                        <label for="Wins">Wins: </label>
                        <InputNumber id="Wins" readonly class="form-control" @bind-Value="hamster.Wins" placeholder="Total Wins "></InputNumber>
                    </div> 
                    <div class="form-group">
                        <label for="Losses">Losses: </label>
                        <InputNumber id="Losses" readonly class="form-control" @bind-Value="hamster.Losses" placeholder="Total Losses "></InputNumber>
                    </div> 
                    <div class="form-group">
                        <label for="games">Total number of battles: </label>
                        <InputNumber id="games" readonly class="form-control" @bind-Value="hamster.Games" ></InputNumber>
                    </div>
                   @if (failure)
                     {
                         <div class="col-xs-2" style="margin-top:10px">
                         <ValidationSummary />
                        </div>
                    }
                     
                  <div class="endFormButtons">
                        <button type="submit" class="btn btn-primary createBtn">Create new hamster</button>
                   </div>
                   @if (success)
                     {
                         <div class="row bg-success text-white" style="margin-top:10px; height:40px">
                          <label class="p-2">@hamster.Name has been added to our hamster library! </label>
                         </div>
                    }
                  
</EditForm>

</div>



@code {

    Hamster hamster = new();


    string btnText = string.Empty;

    //TODO: FIX IMAGE VALIDATION!
    //TODO: FIX AGE VALUE SO THAT IT DOESNT START WITH 0

    List<ImageFile> image = new List<ImageFile>();

    bool success = false;
    bool failure = true;
    private int maxImg = 1;


    async Task HandleValidSubmit()
    {

        success = true;
        failure = false;

        Upload();
        await HamsterService.CreateNewHamster(hamster);

    }

    async Task HandleInvalidSubmit()
    {
        failure = true;
        success = false;

    }


    async Task OnChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach(var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            image.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, FileName = file.Name }); // convert to a base64 string!!
            hamster.ImgName = file.Name;
        }
		
	}

    async Task Upload()
	{
		
		await http.PostAsJsonAsync<List<ImageFile>>("/api/upload", image, System.Threading.CancellationToken.None);
		
	}
    
}
